//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "person")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub person_id: String,
    pub lastname: Option<String>,
    pub firstname: Option<String>,
    pub email: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::doctor::Entity")]
    Doctor,
    #[sea_orm(has_many = "super::patient::Entity")]
    Patient,
}

impl Related<super::doctor::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Doctor.def()
    }
}

impl Related<super::patient::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Patient.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
