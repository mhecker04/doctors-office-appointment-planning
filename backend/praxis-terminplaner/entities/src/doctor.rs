//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "doctor")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub doctor_id: String,
    pub person_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::appointment::Entity")]
    Appointment,
    #[sea_orm(has_many = "super::doctor_appointment_type::Entity")]
    DoctorAppointmentType,
    #[sea_orm(
        belongs_to = "super::person::Entity",
        from = "Column::PersonId",
        to = "super::person::Column::PersonId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Person,
}

impl Related<super::appointment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Appointment.def()
    }
}

impl Related<super::doctor_appointment_type::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DoctorAppointmentType.def()
    }
}

impl Related<super::person::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Person.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
